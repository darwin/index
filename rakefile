#!/usr/bin/env ruby

ROOT = File.expand_path('.')
TEMP = File.join(ROOT, 'temp')
DEPLOY = File.join(ROOT, 'bakery')
WIDGETS = File.join(ROOT, "widgets")
SKINS = File.join(ROOT, "skins")
ENGINE = File.join(ROOT, "engine")
EDITOR = File.join(ROOT, "editor")
SYSTEM = File.join(ROOT, "system")
REDBUG = File.join(ROOT, "redbug")

OSX = PLATFORM =~ /darwin/
WIN = PLATFORM =~ /win32/
NIX = !(OSX || WIN)

require "rubygems"

begin
  require 'pbdev'
rescue LoadError
  begin
    $: << "/Users/darwin/code/pbdev/lib"
    require 'pbdev'
  rescue LoadError
    raise 'Please install pbdev: sudo gem install pagebout-pbdev --source http://gems.github.com'
  end
end
include PBDev

# http://kpumuk.info/ruby-on-rails/colorizing-console-ruby-script-output/
begin
  require 'Win32/Console/ANSI' if WIN
rescue LoadError
  raise 'You must "sudo gem install win32console" to use terminal colors on Windows'
end

def colorize(text, color_code)
  "#{color_code}#{text}\e[0m"
end

def red(text); colorize(text, "\e[31m"); end
def green(text); colorize(text, "\e[32m"); end
def yellow(text); colorize(text, "\e[33m"); end
def blue(text); colorize(text, "\e[34m"); end
def magenta(text); colorize(text, "\e[35m"); end
def azure(text); colorize(text, "\e[36m"); end
def white(text); colorize(text, "\e[37m"); end
def black(text); colorize(text, "\e[30m"); end

def file_color(text); yellow(text); end
def dir_color(text); blue(text); end
def cmd_color(text); azure(text); end

#############################################################################

def sanitize_path(path)
  path = path.gsub('/', '\\') if WIN
  path = path.gsub('sudo ', '') if WIN
  path
end

def system(path, *params)
  path = sanitize_path(path)
  puts yellow(">> #{path} #{params.join(' ')}")
  Kernel.system(path, *params)
end

def sys(cmd, verbose = true)
  puts yellow("> #{cmd}") if verbose
  `#{sanitize_path(cmd)}`
end

def die(s)
  puts red(s)
  exit(1)
end

def relativize_path(path)
  return path unless path[0..ROOT.size-1] == ROOT
  path[ROOT.size+1..-1]
end

#############################################################################

def reset_bake_counters()
  $bake_counters = {
    :widget => {
      :authors => 0,
      :total => 0
    },
    :skin => {
      :authors => 0,
      :total => 0
    },
    :engine => {
      :total => 0
    },
    :editor => {
      :total => 0
    },
    :system => {
      :total => 0
    },
    :redbug => {
      :total => 0
    }
  }
end

def print_bake_counters()
  puts "Processed #{azure("#{$bake_counters[:skin][:total]} skins")} / #{$bake_counters[:skin][:authors]} authors"
  puts "          #{azure("#{$bake_counters[:widget][:total]} widgets")} / #{$bake_counters[:widget][:authors]} authors"
end

def bake(type, path, dest, url, mode)
  return unless File.exists? path
  sys("pbdev bake #{type.to_s} --mode=\"#{mode}\" --url=\"#{url}\" \"#{relativize_path(path)}\" \"#{relativize_path(dest)}\"")
  $bake_counters[type][:total] += 1
end

def bake_author(type, path, dest, url, mode)
  $bake_counters[type][:authors] += 1
  Dir.glob(File.join(path, "*")) do |path|
    next unless File.directory? path
    name = File.basename(path)
    bake(type, path, File.join(dest, name), url+"/"+name, mode)
  end
end

def bake_all(type, path, dest, url, mode)
  return unless File.exists? path
  Dir.glob(File.join(path, "*")) do |author_path|
    next unless File.directory? author_path
    name = File.basename(author_path)
    bake_author(type, author_path, File.join(dest, name), url+"/"+name, mode)
  end
end

def pull(dir)
  puts "cd " + dir_color(dir)
  Dir.chdir(dir) do
    sys("git pull 1>&2")
  end
end

def pull_all(root)
  Dir.glob(File.join(root, "**/.git")) do |dir|
    next if dir == File.join(root, ".git")
    pull(dir[0..-6])
  end
end

#############################################################################

#----------------------------------------------------------------------------
desc "start dev server"
task :start do
  sys("pbdev 1>&2")
end

#----------------------------------------------------------------------------
desc "bake production files (local)"
task :bake do
  die "DEPLOY dir is too short (paranoia)" if DEPLOY.size<10
  sys("rm -rf \"#{DEPLOY}\"")
  tld = ENV["local"] ? "local" : "com"
  mode = ENV["local"] ? "development" : "production"
  reset_bake_counters()
  bake_all(:widget, WIDGETS, File.join(DEPLOY, "widgets"), "http://widgets.pagebout.#{tld}", mode)
  bake_all(:skin, SKINS, File.join(DEPLOY, "skins"), "http://skins.pagebout.#{tld}", mode)
  bake(:engine, ENGINE, File.join(DEPLOY, "engine"), "http://pagebout.#{tld}/engine", mode)
  bake(:editor, EDITOR, File.join(DEPLOY, "editor"), "http://pagebout.#{tld}/editor", mode)
  bake(:system, SYSTEM, File.join(DEPLOY, "system"), "http://pagebout.#{tld}/system", mode)
  bake(:redbug, REDBUG, File.join(DEPLOY, "redbug"), "http://pagebout.#{tld}/redbug", mode)
  print_bake_counters()
end

#----------------------------------------------------------------------------
desc "pull all submodules"
task :pull do
  pull_all(ROOT)
end

#----------------------------------------------------------------------------
desc "add widget into index, eats :user and :repo"
task :add_widget do
  user = ENV["user"] or die("you have to specify github user (user=defunkt)")
  repo = ENV["repo"] or die("you have to specify github user's repo name (repo=pbw-coolbar)")
  dest = repo
  dest = repo[4..-1] if repo=~/^pbw-/
  sys("git submodule add git://github.com/#{user}/#{repo}.git widgets/#{user}/#{dest}")
  Dir.chdir("widgets/#{user}/#{dest}") do
    sys("git remote add push git@github.com:#{user}/#{repo}.git")
  end
end

#----------------------------------------------------------------------------
desc "add skin into index, eats :user and :repo"
task :add_skin do
  user = ENV["user"] or die("you have to specify github user (user=defunkt)")
  repo = ENV["repo"] or die("you have to specify github user's repo name (repo=pbs-skinner)")
  dest = repo
  dest = repo[4..-1] if repo=~/^pbs-/
  sys("git submodule add git://github.com/#{user}/#{repo}.git skins/#{user}/#{dest}")
  Dir.chdir("skins/#{user}/#{dest}") do
    sys("git remote add push git@github.com:#{user}/#{repo}.git")
  end
end

#----------------------------------------------------------------------------

task :default => :start
